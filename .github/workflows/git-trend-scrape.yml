name: Scrape GitHub Trending Repositories
#testing

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *' # Run daily at 09:00 AM UTC

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        pip install requests beautifulsoup4 supabase-py

    - name: Scrape GitHub Trending Repositories and Upload to Supabase
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        python - <<EOF
        import requests
        from bs4 import BeautifulSoup
        import json
        from datetime import datetime
        from supabase import create_client, Client
        import os

        # Initialize Supabase client
        SUPABASE_URL = os.getenv('SUPABASE_URL')
        SUPABASE_KEY = os.getenv('SUPABASE_KEY')
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

        # GitHub Trending URL
        URL = 'https://github.com/trending'

        def scrape_trending_repos():
            print("Fetching GitHub trending repositories...")
            # Fetch the GitHub Trending Page
            response = requests.get(URL)
            if response.status_code != 200:
                print(f"Failed to retrieve data: {response.status_code}")
                return None

            print("Parsing the response...")
            # Parse the HTML content with BeautifulSoup
            soup = BeautifulSoup(response.content, 'html.parser')

            # List to hold all the repositories
            repo_list = []
            repos = soup.find_all('article', class_='Box-row')

            for repo in repos:
                # Extracting repository details with error handling
                repo_name = repo.h1.get_text(strip=True).replace('\n', ' ') if repo.h1 else 'No name found'
                repo_link = 'https://github.com' + repo.h1.a['href'] if repo.h1 and repo.h1.a else 'No link found'
                stars = repo.find('a', class_='Link--muted d-inline-block mr-3')
                stars = stars.get_text(strip=True) if stars else 'No stars found'
                description_tag = repo.p
                description = description_tag.get_text(strip=True) if description_tag else 'No description'

                # Append the repository data
                repo_list.append({
                    'name': repo_name,
                    'link': repo_link,
                    'stars': stars,
                    'description': description
                })

            return repo_list

        def save_to_supabase(repos):
            print(f"Uploading {len(repos)} repositories to Supabase...")
            for repo in repos:
                data = {
                    'name': repo['name'],
                    'link': repo['link'],
                    'stars': repo['stars'],
                    'description': repo['description'],
                    'scraped_at': datetime.utcnow().isoformat()
                }
                response = supabase.table('github_trending_repos').insert(data).execute()
                print(f"Inserted: {repo['name']}, Response: {response.status_code}")

        if __name__ == "__main__":
            trending_repos = scrape_trending_repos()
            if trending_repos:
                save_to_supabase(trending_repos)
                print(f"Successfully scraped and uploaded {len(trending_repos)} repositories.")
            else:
                print("No repositories scraped.")
        EOF

    - name: Check if there are changes
      run: git diff --quiet || echo "Changes detected"

    - name: Commit and push if the data has changed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "GitHub Action"
        git config user.email "actions@users.noreply.github.com"
        git add github_trending_repos.json
        timestamp=$(date -u)
        git commit -m "Latest GitHub Trending Repositories: ${timestamp}" || echo "No changes to commit"
        git push --force
