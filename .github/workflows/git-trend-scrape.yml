name: Scrape GitHub Trending Repositories

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *'  # Scrape daily at 09:00 AM UTC
  push:
    branches:
      - main

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python Dependencies
      run: |
        pip install requests beautifulsoup4

    - name: Scrape GitHub Trending Repositories
      run: |
        python - <<EOF
        import requests
        from bs4 import BeautifulSoup
        import json
        from datetime import datetime
        import re

        # Scraping GitHub Trending
        URL = 'https://github.com/trending'
        response = requests.get(URL)
        soup = BeautifulSoup(response.content, 'html.parser')

        repo_list = []
        repos = soup.find_all('article', class_='Box-row')

        for repo in repos:
            repo_name_tag = repo.find('h2', class_='h3')
            repo_name = repo_name_tag.get_text(strip=True).replace('\n', ' ') if repo_name_tag else 'No name found'
            repo_link_tag = repo_name_tag.find('a') if repo_name_tag else None
            repo_link = 'https://github.com' + repo_link_tag['href'] if repo_link_tag else 'No link found'

            stars_tag = repo.find('a', class_='Link--muted d-inline-block mr-3')
            stars_text = stars_tag.get_text(strip=True).replace(',', '') if stars_tag else 'No stars found'
            stars = int(re.sub(r'[^\d]', '', stars_text.replace('k', '000'))) if stars_text != 'No stars found' else 0

            stars_today_tag = repo.find('span', class_='d-inline-block float-sm-right')
            stars_today_text = stars_today_tag.get_text(strip=True).replace(',', '') if stars_today_tag else 'No stars today'
            stars_today = int(re.sub(r'[^\d]', '', stars_today_text)) if stars_today_text != 'No stars today' else 0

            description_tag = repo.p
            description = description_tag.get_text(strip=True) if description_tag else 'No description'

            repo_list.append({
                'name': repo_name,
                'link': repo_link,
                'stars': stars,
                'stars_today': stars_today,
                'description': description,
                'scraped_at': datetime.now().isoformat()
            })

        # Save JSON to local file
        timestamp = datetime.now().strftime('%Y-%m-%d')
        file_name = f"github_trending_repos_{timestamp}.json"
        with open(file_name, 'w') as f:
            json.dump(repo_list, f, indent=4)
        EOF

    - name: Commit scraped JSON data
      run: |
        git config user.name "GitHub Action"
        git config user.email "actions@users.noreply.github.com"
        git add github_trending_repos_*.json
        git commit -m "Scraped latest GitHub trending repositories"
        git push
