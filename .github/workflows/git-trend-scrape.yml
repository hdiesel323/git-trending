name: Scrape GitHub Trending Repositories

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *' # Run daily at 09:00 AM UTC

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        pip install requests beautifulsoup4

    - name: Scrape GitHub Trending Repositories and Update JSON
      run: |
        python - <<EOF
        import requests
        from bs4 import BeautifulSoup
        import json
        from datetime import datetime
        import os

        # GitHub Trending URL
        URL = 'https://github.com/trending'

        def scrape_trending_repos():
            response = requests.get(URL)
            if response.status_code != 200:
                print(f"Failed to retrieve data: {response.status_code}")
                return None

            soup = BeautifulSoup(response.content, 'html.parser')
            repo_list = []
            repos = soup.find_all('article', class_='Box-row')

            for repo in repos:
                repo_name_tag = repo.find('h2', class_='h3')
                repo_name = repo_name_tag.get_text(strip=True).replace('\n', ' ') if repo_name_tag else 'No name found'
                repo_link_tag = repo_name_tag.find('a') if repo_name_tag else None
                repo_link = 'https://github.com' + repo_link_tag['href'] if repo_link_tag else 'No link found'

                stars_tag = repo.find('a', class_='Link--muted d-inline-block mr-3')
                stars = stars_tag.get_text(strip=True) if stars_tag else 'No stars found'

                stars_today_tag = repo.find('span', class_='d-inline-block float-sm-right')
                stars_today = stars_today_tag.get_text(strip=True) if stars_today_tag else 'No stars today'

                description_tag = repo.p
                description = description_tag.get_text(strip=True) if description_tag else 'No description'

                repo_list.append({
                    'name': repo_name,
                    'link': repo_link,
                    'stars': stars,
                    'stars_today': stars_today,
                    'description': description,
                    'scraped_at': datetime.utcnow().isoformat()
                })

            return repo_list

        def update_json_file(data, filename="github_trending_repos.json"):
            # Load existing data if the file exists
            if os.path.exists(filename):
                with open(filename, 'r') as f:
                    existing_data = json.load(f)
            else:
                existing_data = {'repositories': {}}

            for repo in data:
                name = repo['name']
                if name not in existing_data['repositories']:
                    # Add new repository to the data
                    existing_data['repositories'][name] = {
                        'link': repo['link'],
                        'description': repo['description'],
                        'historical_data': []
                    }

                # Update the repository's historical data
                existing_data['repositories'][name]['historical_data'].append({
                    'date': repo['scraped_at'],
                    'stars': repo['stars'],
                    'stars_today': repo['stars_today']
                })

            # Save the updated data back to the JSON file
            with open(filename, 'w') as f:
                json.dump(existing_data, f, indent=4)

        if __name__ == "__main__":
            trending_repos = scrape_trending_repos()
            if trending_repos:
                update_json_file(trending_repos)
                print(f"Scraped {len(trending_repos)} trending repositories.")
            else:
                print("No repositories scraped.")
        EOF

    - name: Check if there are changes
      run: git diff --quiet || echo "Changes detected"

    - name: Commit and push if the data has changed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "GitHub Action"
        git config user.email "actions@users.noreply.github.com"
        git add github_trending_repos.json
        timestamp=$(date -u)
        git commit -m "Latest GitHub Trending Repositories: ${timestamp}" || echo "No changes to commit"
        git push --force
